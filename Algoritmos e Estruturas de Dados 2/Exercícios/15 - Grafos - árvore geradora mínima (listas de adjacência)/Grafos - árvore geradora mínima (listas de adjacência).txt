Implemente o algoritmo de Prim. A função deve receber um grafo representado por uma lista de adjacência e construir uma árvore geradora mínima, que deve ser construída a partir do vértice 0.

Para a implementação, considere o grafo representado por lista de adjacências, conforme as estruturas apresentadas abaixo

typedef struct {
   int V;  número de vértices
   int A;  número de arestas
   Lista adj;  lista de adjacências
}GrafoLA;

typedef struct Cell Cell;

struct Cell{
    int key;
    Cell next;
};


typedef struct{
    Cell head;
}Lista;
Input Format

A primeira linha contém o número de vértices. A segunda linha contém a quantidade de arestas (A). Para cada uma das A próximas linhas devem der lidos dois números inteiros. sendo os 2 primeiros, a aresta, e o último, o peso da aresta.

Constraints

.

Output Format

Imprimir a árvore geradora mínima. Cada linha deve ser impressa no seguinte formato v_i pai[v_i].

Para o vértice da árvore que não tiver pai, deve ser impresso o caractere - (traçosinal de menos). Como o algoritmo deve ser iniciada a partir do vértice 0, então a primeira linha sempre será 0 -

Sample Input 0

9
28
0 1 4
0 7 8
1 0 4
1 2 8
1 7 11
2 1 8
2 3 7
2 5 4
2 8 2
3 2 7
3 4 9
3 5 14
4 3 9
4 5 10
5 2 4
5 3 14
5 4 10
5 6 2
6 5 2
6 7 1
6 8 6
7 0 8
7 1 11
7 6 1
7 8 7
8 2 2
8 6 6
8 7 7
Sample Output 0

0 -
1 0
2 1
3 2
4 3
5 2
6 5
7 6
8 2
Explanation 0

Na linha 3 da entrada, 0 e 1 forma uma aresta e o valor 4 é o respectivo peso dessa aresta.